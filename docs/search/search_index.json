{
    "docs": [
        {
            "location": "/",
            "text": "RediSearch-PHP\n\u00b6\n\n\nRediSearch-PHP is a PHP client library for the \nRediSearch\n module which adds full-text search to Redis.\n\n\nRequirements\n\u00b6\n\n\n\n\nRedis running with the \nRediSearch module loaded\n.\n\n\nPHP >=7\n\n\nPhpRedis\n, \nPredis\n, or \nphp-redis-client\n.\n\n\n\n\nInstall\n\u00b6\n\n\ncomposer install ethanhann/redisearch-php\n\n\n\n\nLoad\n\u00b6\n\n\nrequire_once\n \n'vendor/autoload.php'\n;\n\n\n\n\n\nCreate a Redis Client\n\u00b6\n\n\nuse\n \nEhann\\RediSearch\\Redis\\PredisAdapter\n;\n\n\nuse\n \nEhann\\RediSearch\\Redis\\PhpRedisAdapter\n;\n\n\nuse\n \nEhann\\RediSearch\\Redis\\RedisClientAdapter\n;\n\n\n\n$redis\n \n=\n \n(\nnew\n \nPredisAdapter\n())\n->\nconnect\n(\n'127.0.0.1'\n,\n \n6379\n);\n\n\n// or\n\n\n$redis\n \n=\n \n(\nnew\n \nPhpRedisAdapter\n())\n->\nconnect\n(\n'127.0.0.1'\n,\n \n6379\n);\n\n\n// or\n\n\n$redis\n \n=\n \n(\nnew\n \nRedisClientAdapter\n())\n->\nconnect\n(\n'127.0.0.1'\n,\n \n6379\n);\n\n\n\n\n\nCreate the Schema\n\u00b6\n\n\nuse\n \nEhann\\RediSearch\\Index\n;\n\n\n\n$bookIndex\n \n=\n \nnew\n \nIndex\n(\n$redis\n);\n\n\n\n$bookIndex\n->\naddTextField\n(\n'title'\n)\n\n    \n->\naddTextField\n(\n'author'\n)\n\n    \n->\naddNumericField\n(\n'price'\n)\n\n    \n->\naddNumericField\n(\n'stock'\n)\n\n    \n->\ncreate\n();\n\n\n\n\n\nAdd a Document\n\u00b6\n\n\n$bookIndex\n->\nadd\n([\n\n    \nnew\n \nTextField\n(\n'title'\n,\n \n'Tale of Two Cities'\n),\n\n    \nnew\n \nTextField\n(\n'author'\n,\n \n'Charles Dickens'\n),\n\n    \nnew\n \nNumericField\n(\n'price'\n,\n \n9.99\n),\n\n    \nnew\n \nNumericField\n(\n'stock'\n,\n \n231\n),\n\n\n]);\n\n\n\n\n\nSearch the Index\n\u00b6\n\n\n$result\n \n=\n \n$bookIndex\n->\nsearch\n(\n'two cities'\n);\n\n\n\n$result\n->\ncount\n();\n     \n// Number of documents.\n\n\n$result\n->\ndocuments\n();\n \n// Array of matches.\n\n\n\n// Documents are returned as objects by default.\n\n\n$firstResult\n \n=\n \n$result\n->\ndocuments\n()[\n0\n];\n\n\n$firstResult\n->\ntitle\n;\n\n\n$firstResult\n->\nauthor\n;",
            "title": "Getting Started"
        },
        {
            "location": "/#redisearch-php",
            "text": "RediSearch-PHP is a PHP client library for the  RediSearch  module which adds full-text search to Redis.",
            "title": "RediSearch-PHP"
        },
        {
            "location": "/#requirements",
            "text": "Redis running with the  RediSearch module loaded .  PHP >=7  PhpRedis ,  Predis , or  php-redis-client .",
            "title": "Requirements"
        },
        {
            "location": "/#install",
            "text": "composer install ethanhann/redisearch-php",
            "title": "Install"
        },
        {
            "location": "/#load",
            "text": "require_once   'vendor/autoload.php' ;",
            "title": "Load"
        },
        {
            "location": "/#create-a-redis-client",
            "text": "use   Ehann\\RediSearch\\Redis\\PredisAdapter ;  use   Ehann\\RediSearch\\Redis\\PhpRedisAdapter ;  use   Ehann\\RediSearch\\Redis\\RedisClientAdapter ;  $redis   =   ( new   PredisAdapter ()) -> connect ( '127.0.0.1' ,   6379 );  // or  $redis   =   ( new   PhpRedisAdapter ()) -> connect ( '127.0.0.1' ,   6379 );  // or  $redis   =   ( new   RedisClientAdapter ()) -> connect ( '127.0.0.1' ,   6379 );",
            "title": "Create a Redis Client"
        },
        {
            "location": "/#create-the-schema",
            "text": "use   Ehann\\RediSearch\\Index ;  $bookIndex   =   new   Index ( $redis );  $bookIndex -> addTextField ( 'title' ) \n     -> addTextField ( 'author' ) \n     -> addNumericField ( 'price' ) \n     -> addNumericField ( 'stock' ) \n     -> create ();",
            "title": "Create the Schema"
        },
        {
            "location": "/#add-a-document",
            "text": "$bookIndex -> add ([ \n     new   TextField ( 'title' ,   'Tale of Two Cities' ), \n     new   TextField ( 'author' ,   'Charles Dickens' ), \n     new   NumericField ( 'price' ,   9.99 ), \n     new   NumericField ( 'stock' ,   231 ),  ]);",
            "title": "Add a Document"
        },
        {
            "location": "/#search-the-index",
            "text": "$result   =   $bookIndex -> search ( 'two cities' );  $result -> count ();       // Number of documents.  $result -> documents ();   // Array of matches.  // Documents are returned as objects by default.  $firstResult   =   $result -> documents ()[ 0 ];  $firstResult -> title ;  $firstResult -> author ;",
            "title": "Search the Index"
        },
        {
            "location": "/indexing/",
            "text": "Indexing\n\u00b6\n\n\nField Types\n\u00b6\n\n\nThere are three types of fields that can be added to a document: \nTextField\n, \nNumericField\n, and \nGeoField\n.\n\n\nThey are instantiated like this:\n\n\nnew\n \nTextField\n(\n'author'\n,\n \n'Charles Dickens'\n);\n\n\nnew\n \nNumericField\n(\n'price'\n,\n \n9.99\n);\n\n\nnew\n \nGeoField\n(\n'place'\n,\n \nnew\n \nGeoLocation\n(\n-\n77.0366\n,\n \n38.8977\n));\n\n\n\n\n\nFields can also be made with the FieldFactory class:\n\n\n// Alternative syntax for: new TextField('author', 'Charles Dickens');\n\n\nFieldFactory\n::\nmake\n(\n'author'\n,\n \n'Charles Dickens'\n);\n\n\n\n// Alternative syntax for: new NumericField('price', 9.99);\n\n\nFieldFactory\n::\nmake\n(\n'price'\n,\n \n9.99\n);\n\n\n\n// Alternative syntax for: new GeoField('place', new GeoLocation(-77.0366, 38.8977));\n\n\nFieldFactory\n::\nmake\n(\n'place'\n,\n \nnew\n \nGeoLocation\n(\n-\n77.0366\n,\n \n38.8977\n));\n\n\n\n\n\nAdding Documents\n\u00b6\n\n\nAdd an array of field objects:\n\n\n$bookIndex\n->\nadd\n([\n\n    \nnew\n \nTextField\n(\n'title'\n,\n \n'Tale of Two Cities'\n),\n\n    \nnew\n \nTextField\n(\n'author'\n,\n \n'Charles Dickens'\n),\n\n    \nnew\n \nNumericField\n(\n'price'\n,\n \n9.99\n),\n\n    \nnew\n \nGeoField\n(\n'place'\n,\n \nnew\n \nGeoLocation\n(\n-\n77.0366\n,\n \n38.8977\n)),\n\n\n]);\n\n\n\n\n\nAdd an associative array:\n\n\n$bookIndex\n->\nadd\n([\n\n    \n'title'\n \n=>\n \n'Tale of Two Cities'\n,\n\n    \n'author'\n \n=>\n \n'Charles Dickens'\n,\n\n    \n'price'\n \n=>\n \n9.99\n,\n\n    \n'place'\n \n=>\n \nnew\n \nGeoLocation\n(\n-\n77.0366\n,\n \n38.8977\n),\n\n\n]);\n\n\n\n\n\nCreate a document with the index's makeDocument method, then set field values:\n\n\n$document\n \n=\n \n$bookIndex\n->\nmakeDocument\n();\n\n\n$document\n->\ntitle\n->\nsetValue\n(\n'How to be awesome.'\n);\n\n\n$document\n->\nauthor\n->\nsetValue\n(\n'Jack'\n);\n\n\n$document\n->\nprice\n->\nsetValue\n(\n9.99\n);\n\n\n$document\n->\nplace\n->\nsetValue\n(\nnew\n \nGeoLocation\n(\n-\n77.0366\n,\n \n38.8977\n));\n\n\n\n$this\n->\nadd\n(\n$document\n);\n\n\n\n\n\nDocBlocks can (optionally) be used to type hint field property names:\n\n\n/** @var BookDocument $document */\n\n\n$document\n \n=\n \n$bookIndex\n->\nmakeDocument\n();\n\n\n\n// \"title\" will auto-complete correctly in your IDE provided BookDocument has a \"title\" property or @property annotation.\n\n\n$document\n->\ntitle\n->\nsetValue\n(\n'How to be awesome.'\n);\n\n\n\n$this\n->\nadd\n(\n$document\n);\n\n\n\n\n\n<?php\n\n\n\nnamespace\n \nYour\\Documents\n;\n\n\n\nuse\n \nEhann\\RediSearch\\Document\\Document\n;\n\n\nuse\n \nEhann\\RediSearch\\Fields\\NumericField\n;\n\n\nuse\n \nEhann\\RediSearch\\Fields\\TextField\n;\n\n\n\n/**\n\n\n * @property TextField title\n\n\n * @property TextField author\n\n\n * @property NumericField price\n\n\n * @property GeoField place\n\n\n */\n\n\nclass\n \nBookDocument\n \nextends\n \nDocument\n\n\n{\n\n\n}\n\n\n\n\n\nUpdating a Document\n\u00b6\n\n\nDocuments are updated with an index's replace method.\n\n\n// Make a document.\n\n\n$document\n \n=\n \n$bookIndex\n->\nmakeDocument\n();\n\n\n$document\n->\ntitle\n->\nsetValue\n(\n'How to be awesome.'\n);\n\n\n$document\n->\nauthor\n->\nsetValue\n(\n'Jack'\n);\n\n\n$document\n->\nprice\n->\nsetValue\n(\n9.99\n);\n\n\n$document\n->\nplace\n->\nsetValue\n(\nnew\n \nGeoLocation\n(\n-\n77.0366\n,\n \n38.8977\n));\n\n\n$bookIndex\n->\nadd\n(\n$document\n);\n\n\n\n// Update a couple fields\n\n\n$document\n->\ntitle\n->\nsetValue\n(\n'How to be awesome: Part 2.'\n);\n\n\n$document\n->\nprice\n->\nsetValue\n(\n19.99\n);\n\n\n\n// Update the document.\n\n\n$bookIndex\n->\nreplace\n(\n$document\n);\n\n\n\n\n\nA document can also be updating when its ID is specified:\n\n\n// Make a document.\n\n\n$document\n \n=\n \n$bookIndex\n->\nmakeDocument\n();\n\n\n$document\n->\ntitle\n->\nsetValue\n(\n'How to be awesome.'\n);\n\n\n$document\n->\nauthor\n->\nsetValue\n(\n'Jack'\n);\n\n\n$document\n->\nprice\n->\nsetValue\n(\n9.99\n);\n\n\n$document\n->\nplace\n->\nsetValue\n(\nnew\n \nGeoLocation\n(\n-\n77.0366\n,\n \n38.8977\n));\n\n\n$bookIndex\n->\nadd\n(\n$document\n);\n\n\n\n// Create a new document and assign the old document's ID to it.\n\n\n$newDocument\n \n=\n \n$bookIndex\n->\nmakeDocument\n(\n$document\n->\ngetId\n());\n\n\n\n// Set a couple fields.\n\n\n$document\n->\ntitle\n->\nsetValue\n(\n''\n);\n\n\n$document\n->\nauthor\n->\nsetValue\n(\n'Jack'\n);\n\n\n$newDocument\n->\ntitle\n->\nsetValue\n(\n'How to be awesome: Part 2.'\n);\n\n\n$newDocument\n->\nprice\n->\nsetValue\n(\n19.99\n);\n\n\n\n// Update the document.\n\n\n$bookIndex\n->\nreplace\n(\n$newDocument\n);\n\n\n\n\n\nBatch Indexing\n\u00b6\n\n\nBatch indexing is possible with the \naddMany\n method.\nTo index an external collection, make sure to set the document's ID to the ID of the record in the external collection.\n\n\n// Get a record set from your DB (or some other datastore).\n\n\n$records\n \n=\n \n$someDatabase\n->\nfindAll\n();\n\n\n\n$documents\n \n=\n \n[];\n\n\nforeach\n \n(\n$records\n \nas\n \n$record\n)\n \n{\n\n    \n// Make a new document with the external record's ID.\n\n    \n$newDocument\n \n=\n \n$bookIndex\n->\nmakeDocument\n(\n$record\n->\nid\n);\n\n    \n$newDocument\n->\ntitle\n->\nsetValue\n(\n$record\n->\ntitle\n);\n\n    \n$newDocument\n->\nauthor\n->\nsetValue\n(\n$record\n->\nauthor\n);\n\n    \n$documents\n[]\n \n=\n \n$newDocument\n;\n \n\n}\n\n\n\n// Add all the documents at once.\n\n\n$bookIndex\n->\naddMany\n(\n$documents\n);\n\n\n\n// It is possible to increase indexing speed by disabling atomicity by passing true as the second parameter.\n\n\n// Note that this is only possible when using the phpredis extension.\n\n\n$bookIndex\n->\naddMany\n(\n$documents\n,\n \ntrue\n);\n\n\n\n\n\nIndexing from a Hash\n\u00b6\n\n\nRedis hashes are key/value pairs referenced by a key. \nIt is possible to index an existing hash with the \naddHash\n method.\nThe document's ID has to be the same as the hash's key.\nAttempting to index a hash that does not exist will result in an exception.\n\n\nIndex a hash with the key \"foo\":\n\n\n$document = $bookIndex->makeDocument('foo');\n\n\n$bookIndex->addHash($document);\n\n\n\n\n\nReplace a document in the index from a hash:\n\n\n$document = $bookIndex->makeDocument('foo');\n\n\n$bookIndex->replaceHash($document);",
            "title": "Indexing"
        },
        {
            "location": "/indexing/#indexing",
            "text": "",
            "title": "Indexing"
        },
        {
            "location": "/indexing/#field-types",
            "text": "There are three types of fields that can be added to a document:  TextField ,  NumericField , and  GeoField .  They are instantiated like this:  new   TextField ( 'author' ,   'Charles Dickens' );  new   NumericField ( 'price' ,   9.99 );  new   GeoField ( 'place' ,   new   GeoLocation ( - 77.0366 ,   38.8977 ));   Fields can also be made with the FieldFactory class:  // Alternative syntax for: new TextField('author', 'Charles Dickens');  FieldFactory :: make ( 'author' ,   'Charles Dickens' );  // Alternative syntax for: new NumericField('price', 9.99);  FieldFactory :: make ( 'price' ,   9.99 );  // Alternative syntax for: new GeoField('place', new GeoLocation(-77.0366, 38.8977));  FieldFactory :: make ( 'place' ,   new   GeoLocation ( - 77.0366 ,   38.8977 ));",
            "title": "Field Types"
        },
        {
            "location": "/indexing/#adding-documents",
            "text": "Add an array of field objects:  $bookIndex -> add ([ \n     new   TextField ( 'title' ,   'Tale of Two Cities' ), \n     new   TextField ( 'author' ,   'Charles Dickens' ), \n     new   NumericField ( 'price' ,   9.99 ), \n     new   GeoField ( 'place' ,   new   GeoLocation ( - 77.0366 ,   38.8977 )),  ]);   Add an associative array:  $bookIndex -> add ([ \n     'title'   =>   'Tale of Two Cities' , \n     'author'   =>   'Charles Dickens' , \n     'price'   =>   9.99 , \n     'place'   =>   new   GeoLocation ( - 77.0366 ,   38.8977 ),  ]);   Create a document with the index's makeDocument method, then set field values:  $document   =   $bookIndex -> makeDocument ();  $document -> title -> setValue ( 'How to be awesome.' );  $document -> author -> setValue ( 'Jack' );  $document -> price -> setValue ( 9.99 );  $document -> place -> setValue ( new   GeoLocation ( - 77.0366 ,   38.8977 ));  $this -> add ( $document );   DocBlocks can (optionally) be used to type hint field property names:  /** @var BookDocument $document */  $document   =   $bookIndex -> makeDocument ();  // \"title\" will auto-complete correctly in your IDE provided BookDocument has a \"title\" property or @property annotation.  $document -> title -> setValue ( 'How to be awesome.' );  $this -> add ( $document );   <?php  namespace   Your\\Documents ;  use   Ehann\\RediSearch\\Document\\Document ;  use   Ehann\\RediSearch\\Fields\\NumericField ;  use   Ehann\\RediSearch\\Fields\\TextField ;  /**   * @property TextField title   * @property TextField author   * @property NumericField price   * @property GeoField place   */  class   BookDocument   extends   Document  {  }",
            "title": "Adding Documents"
        },
        {
            "location": "/indexing/#updating-a-document",
            "text": "Documents are updated with an index's replace method.  // Make a document.  $document   =   $bookIndex -> makeDocument ();  $document -> title -> setValue ( 'How to be awesome.' );  $document -> author -> setValue ( 'Jack' );  $document -> price -> setValue ( 9.99 );  $document -> place -> setValue ( new   GeoLocation ( - 77.0366 ,   38.8977 ));  $bookIndex -> add ( $document );  // Update a couple fields  $document -> title -> setValue ( 'How to be awesome: Part 2.' );  $document -> price -> setValue ( 19.99 );  // Update the document.  $bookIndex -> replace ( $document );   A document can also be updating when its ID is specified:  // Make a document.  $document   =   $bookIndex -> makeDocument ();  $document -> title -> setValue ( 'How to be awesome.' );  $document -> author -> setValue ( 'Jack' );  $document -> price -> setValue ( 9.99 );  $document -> place -> setValue ( new   GeoLocation ( - 77.0366 ,   38.8977 ));  $bookIndex -> add ( $document );  // Create a new document and assign the old document's ID to it.  $newDocument   =   $bookIndex -> makeDocument ( $document -> getId ());  // Set a couple fields.  $document -> title -> setValue ( '' );  $document -> author -> setValue ( 'Jack' );  $newDocument -> title -> setValue ( 'How to be awesome: Part 2.' );  $newDocument -> price -> setValue ( 19.99 );  // Update the document.  $bookIndex -> replace ( $newDocument );",
            "title": "Updating a Document"
        },
        {
            "location": "/indexing/#batch-indexing",
            "text": "Batch indexing is possible with the  addMany  method.\nTo index an external collection, make sure to set the document's ID to the ID of the record in the external collection.  // Get a record set from your DB (or some other datastore).  $records   =   $someDatabase -> findAll ();  $documents   =   [];  foreach   ( $records   as   $record )   { \n     // Make a new document with the external record's ID. \n     $newDocument   =   $bookIndex -> makeDocument ( $record -> id ); \n     $newDocument -> title -> setValue ( $record -> title ); \n     $newDocument -> author -> setValue ( $record -> author ); \n     $documents []   =   $newDocument ;   }  // Add all the documents at once.  $bookIndex -> addMany ( $documents );  // It is possible to increase indexing speed by disabling atomicity by passing true as the second parameter.  // Note that this is only possible when using the phpredis extension.  $bookIndex -> addMany ( $documents ,   true );",
            "title": "Batch Indexing"
        },
        {
            "location": "/indexing/#indexing-from-a-hash",
            "text": "Redis hashes are key/value pairs referenced by a key. \nIt is possible to index an existing hash with the  addHash  method.\nThe document's ID has to be the same as the hash's key.\nAttempting to index a hash that does not exist will result in an exception.  Index a hash with the key \"foo\":  $document = $bookIndex->makeDocument('foo');  $bookIndex->addHash($document);   Replace a document in the index from a hash:  $document = $bookIndex->makeDocument('foo');  $bookIndex->replaceHash($document);",
            "title": "Indexing from a Hash"
        },
        {
            "location": "/searching/",
            "text": "Searching\n\u00b6\n\n\nSimple Text Search\n\u00b6\n\n\nText fields can be filtered with the index's search method.\n\n\n$result\n \n=\n \n$bookIndex\n->\nsearch\n(\n'two cities'\n);\n\n\n\n$result\n->\ncount\n();\n     \n// Number of documents.\n\n\n$result\n->\ndocuments\n();\n \n// Array of stdObjects.\n\n\n\n\n\nDocuments can also be returned as arrays instead of objects by passing true as the second parameter to the search method.\n\n\n$result\n \n=\n \n$bookIndex\n->\nsearch\n(\n'two cities'\n,\n \ntrue\n);\n\n\n\n$result\n->\ndocuments\n();\n \n// Array of arrays.\n\n\n\n\n\nFiltering Numeric Fields\n\u00b6\n\n\nNumeric fields can be filtered with the index's filter method.\n\n\n$result\n \n=\n \n$bookIndex\n\n    \n->\nfilter\n(\n'price'\n,\n \n4.99\n,\n \n19.99\n)\n\n    \n->\nsearch\n(\n'two cities'\n);\n\n\n\n\n\nFiltering Geo Fields\n\u00b6\n\n\nNumeric fields can be filtered with the index's filter method.\n\n\n$result\n \n=\n \n$bookIndex\n\n    \n->\nfilter\n(\n'price'\n,\n \n4.99\n,\n \n19.99\n)\n\n    \n->\nsearch\n(\n'two cities'\n);\n\n\n\n\n\nSorting Results\n\u00b6\n\n\nSearch results can be sorted with the index's sort method.\n\n\n$result\n \n=\n \n$bookIndex\n\n    \n->\nsortBy\n(\n'price'\n)\n\n    \n->\nsearch\n(\n'two cities'\n);\n\n\n\n\n\nSetting a Language\n\u00b6\n\n\nA supported language can be specified when running a query.\nSupported languages are represented as constants in the \nEhann\\RediSearch\\Language\n class.  \n\n\n$result\n \n=\n \n$bookIndex\n\n    \n->\nlanguage\n(\nLanguage\n::\nITALIAN\n)\n\n    \n->\nsearch\n(\n'two cities'\n);\n\n\n\n\n\nExplaining a Query\n\u00b6\n\n\nAn explanation for a query can be generated with the index's explain method.\n\n\nThis can be helpful for understanding why a query is returning a set of results.\n\n\n$result\n \n=\n \n$bookIndex\n\n    \n->\nfilter\n(\n'price'\n,\n \n4.99\n,\n \n19.99\n)\n\n    \n->\nsortBy\n(\n'price'\n)\n\n    \n->\nexplain\n(\n'two cities'\n);\n\n\n\n\n\nLogging Queries\n\u00b6\n\n\nLogging is optional. It can be enabled by injecting a PSR compliant logger, such as Monolog, into a RedisClient instance.\n\n\nInstall Monolog:\n\n\ncomposer require monolog/monolog\n\n\n\n\nInject a logger instance (with a stream handler in this example):\n\n\n$logger\n \n=\n \nnew\n \nLogger\n(\n'Ehann\\RediSearch'\n);\n\n\n$logger\n->\npushHandler\n(\nnew\n \nStreamHandler\n(\n'MyLogFile.log'\n,\n \nLogger\n::\nDEBUG\n));\n\n\n$this\n->\nredisClient\n->\nsetLogger\n(\n$logger\n);",
            "title": "Searching"
        },
        {
            "location": "/searching/#searching",
            "text": "",
            "title": "Searching"
        },
        {
            "location": "/searching/#simple-text-search",
            "text": "Text fields can be filtered with the index's search method.  $result   =   $bookIndex -> search ( 'two cities' );  $result -> count ();       // Number of documents.  $result -> documents ();   // Array of stdObjects.   Documents can also be returned as arrays instead of objects by passing true as the second parameter to the search method.  $result   =   $bookIndex -> search ( 'two cities' ,   true );  $result -> documents ();   // Array of arrays.",
            "title": "Simple Text Search"
        },
        {
            "location": "/searching/#filtering-numeric-fields",
            "text": "Numeric fields can be filtered with the index's filter method.  $result   =   $bookIndex \n     -> filter ( 'price' ,   4.99 ,   19.99 ) \n     -> search ( 'two cities' );",
            "title": "Filtering Numeric Fields"
        },
        {
            "location": "/searching/#filtering-geo-fields",
            "text": "Numeric fields can be filtered with the index's filter method.  $result   =   $bookIndex \n     -> filter ( 'price' ,   4.99 ,   19.99 ) \n     -> search ( 'two cities' );",
            "title": "Filtering Geo Fields"
        },
        {
            "location": "/searching/#sorting-results",
            "text": "Search results can be sorted with the index's sort method.  $result   =   $bookIndex \n     -> sortBy ( 'price' ) \n     -> search ( 'two cities' );",
            "title": "Sorting Results"
        },
        {
            "location": "/searching/#setting-a-language",
            "text": "A supported language can be specified when running a query.\nSupported languages are represented as constants in the  Ehann\\RediSearch\\Language  class.    $result   =   $bookIndex \n     -> language ( Language :: ITALIAN ) \n     -> search ( 'two cities' );",
            "title": "Setting a Language"
        },
        {
            "location": "/searching/#explaining-a-query",
            "text": "An explanation for a query can be generated with the index's explain method.  This can be helpful for understanding why a query is returning a set of results.  $result   =   $bookIndex \n     -> filter ( 'price' ,   4.99 ,   19.99 ) \n     -> sortBy ( 'price' ) \n     -> explain ( 'two cities' );",
            "title": "Explaining a Query"
        },
        {
            "location": "/searching/#logging-queries",
            "text": "Logging is optional. It can be enabled by injecting a PSR compliant logger, such as Monolog, into a RedisClient instance.  Install Monolog:  composer require monolog/monolog  Inject a logger instance (with a stream handler in this example):  $logger   =   new   Logger ( 'Ehann\\RediSearch' );  $logger -> pushHandler ( new   StreamHandler ( 'MyLogFile.log' ,   Logger :: DEBUG ));  $this -> redisClient -> setLogger ( $logger );",
            "title": "Logging Queries"
        },
        {
            "location": "/aggregating/",
            "text": "Aggregating\n\u00b6\n\n\nThe Basics\n\u00b6\n\n\nMake an \nindex\n and add a few documents to it: \n\n\nuse\n \nEhann\\RediSearch\\Index\n;\n\n\n\n$bookIndex\n \n=\n \nnew\n \nIndex\n(\n$redis\n);\n\n\n\n$bookIndex\n->\nadd\n([\n\n    \n'title'\n \n=>\n \n'How to be awesome'\n,\n\n    \n'price'\n \n=>\n \n9.99\n\n\n]);\n\n\n\n$bookIndex\n->\nadd\n([\n\n    \n'title'\n \n=>\n \n'Aggregating is awesome'\n,\n\n    \n'price'\n \n=>\n \n19.99\n\n\n]);\n\n\n\n\n\nNow group by title and get the average price:\n\n\n$results\n \n=\n \n$bookIndex\n->\nmakeAggregateBuilder\n()\n\n    \n->\ngroupBy\n(\n'title'\n)\n\n    \n->\navg\n(\n'price'\n);",
            "title": "Aggregating"
        },
        {
            "location": "/aggregating/#aggregating",
            "text": "",
            "title": "Aggregating"
        },
        {
            "location": "/aggregating/#the-basics",
            "text": "Make an  index  and add a few documents to it:   use   Ehann\\RediSearch\\Index ;  $bookIndex   =   new   Index ( $redis );  $bookIndex -> add ([ \n     'title'   =>   'How to be awesome' , \n     'price'   =>   9.99  ]);  $bookIndex -> add ([ \n     'title'   =>   'Aggregating is awesome' , \n     'price'   =>   19.99  ]);   Now group by title and get the average price:  $results   =   $bookIndex -> makeAggregateBuilder () \n     -> groupBy ( 'title' ) \n     -> avg ( 'price' );",
            "title": "The Basics"
        },
        {
            "location": "/suggesting/",
            "text": "Suggesting\n\u00b6\n\n\nCreating a Suggestion Index\n\u00b6\n\n\nCreate a suggestion index called \"MySuggestions\":\n\n\nuse\n \nEhann\\RediSearch\\Suggestion\n;\n\n\n\n$suggestion\n \n=\n \nnew\n \nSuggestion\n(\n$redisClient\n,\n \n'MySuggestions'\n);\n\n\n\n\n\nAdding a Suggestion\n\u00b6\n\n\nAdd a suggestion with a score:\n\n\n$suggestion\n->\nadd\n(\n'Tale of Two Cities'\n,\n \n1.10\n);\n\n\n\n\n\nGetting a Suggestion\n\u00b6\n\n\nPass a partial string to the get method: \n\n\n$result\n \n=\n \n$suggestion\n->\nget\n(\n'Cities'\n);\n\n\n\n\n\nDeleting a Suggestion\n\u00b6\n\n\nPass the entire suggestion string to the delete method:\n\n\n$result\n \n=\n \n$suggestion\n->\ndelete\n(\n'Tale of Two Cities'\n);\n\n\n\n\n\nGetting the Number of Possible Suggestions\n\u00b6\n\n\nSimply use the suggestion index's length method:\n\n\n$numberOfPossibleSuggestions\n \n=\n \n$suggestion\n->\nlength\n();",
            "title": "Suggesting"
        },
        {
            "location": "/suggesting/#suggesting",
            "text": "",
            "title": "Suggesting"
        },
        {
            "location": "/suggesting/#creating-a-suggestion-index",
            "text": "Create a suggestion index called \"MySuggestions\":  use   Ehann\\RediSearch\\Suggestion ;  $suggestion   =   new   Suggestion ( $redisClient ,   'MySuggestions' );",
            "title": "Creating a Suggestion Index"
        },
        {
            "location": "/suggesting/#adding-a-suggestion",
            "text": "Add a suggestion with a score:  $suggestion -> add ( 'Tale of Two Cities' ,   1.10 );",
            "title": "Adding a Suggestion"
        },
        {
            "location": "/suggesting/#getting-a-suggestion",
            "text": "Pass a partial string to the get method:   $result   =   $suggestion -> get ( 'Cities' );",
            "title": "Getting a Suggestion"
        },
        {
            "location": "/suggesting/#deleting-a-suggestion",
            "text": "Pass the entire suggestion string to the delete method:  $result   =   $suggestion -> delete ( 'Tale of Two Cities' );",
            "title": "Deleting a Suggestion"
        },
        {
            "location": "/suggesting/#getting-the-number-of-possible-suggestions",
            "text": "Simply use the suggestion index's length method:  $numberOfPossibleSuggestions   =   $suggestion -> length ();",
            "title": "Getting the Number of Possible Suggestions"
        },
        {
            "location": "/laravel-support/",
            "text": "Laravel Support\n\u00b6\n\n\nLaravel-RediSearch\n allows for indexing and searching Laravel models.\nIt provides a \nLaravel Scout\n driver.\n\n\nGetting Started\n\u00b6\n\n\nInstall\n\u00b6\n\n\ncomposer install ethanhann/laravel-redisearch\n\n\n\n\nRegister the Provider\n\u00b6\n\n\nAdd this entry to the providers array in config/app.php.\n\n\nEhann\\LaravelRediSearch\\RediSearchServiceProvider\n::\nclass\n\n\n\n\n\nConfigure the Scout Driver\n\u00b6\n\n\nUpdate the Scout driver in config/scout.php.\n\n\n'driver'\n \n=>\n \nenv\n(\n'SCOUT_DRIVER'\n,\n \n'ehann-redisearch'\n),\n\n\n\n\n\nImport a Model\n\u00b6\n\n\nImport a \"Product\" model that is \nconfigured to be searchable\n:\n\n\nartisan ehann:redisearch:import App\n\\\\\nProduct\n\n\n\n\nDelete the index before importing:\n\n\nartisan ehann:redisearch:import App\n\\\\\nProduct --recreate-index\n\n\n\n\nImport models without an ID field (this should be rarely needed):\n\n\nartisan ehann:redisearch:import App\n\\\\\nProduct --no-id\n\n\n\n\nWhat now?\n\u00b6\n\n\nSee the \nLaravel Scout\n documentation for additional information.",
            "title": "Laravel Support"
        },
        {
            "location": "/laravel-support/#laravel-support",
            "text": "Laravel-RediSearch  allows for indexing and searching Laravel models.\nIt provides a  Laravel Scout  driver.",
            "title": "Laravel Support"
        },
        {
            "location": "/laravel-support/#getting-started",
            "text": "",
            "title": "Getting Started"
        },
        {
            "location": "/laravel-support/#install",
            "text": "composer install ethanhann/laravel-redisearch",
            "title": "Install"
        },
        {
            "location": "/laravel-support/#register-the-provider",
            "text": "Add this entry to the providers array in config/app.php.  Ehann\\LaravelRediSearch\\RediSearchServiceProvider :: class",
            "title": "Register the Provider"
        },
        {
            "location": "/laravel-support/#configure-the-scout-driver",
            "text": "Update the Scout driver in config/scout.php.  'driver'   =>   env ( 'SCOUT_DRIVER' ,   'ehann-redisearch' ),",
            "title": "Configure the Scout Driver"
        },
        {
            "location": "/laravel-support/#import-a-model",
            "text": "Import a \"Product\" model that is  configured to be searchable :  artisan ehann:redisearch:import App \\\\ Product  Delete the index before importing:  artisan ehann:redisearch:import App \\\\ Product --recreate-index  Import models without an ID field (this should be rarely needed):  artisan ehann:redisearch:import App \\\\ Product --no-id",
            "title": "Import a Model"
        },
        {
            "location": "/laravel-support/#what-now",
            "text": "See the  Laravel Scout  documentation for additional information.",
            "title": "What now?"
        },
        {
            "location": "/changelog/",
            "text": "Changelog\n\u00b6\n\n\n1.1.2\n\u00b6\n\n\nChanges since last release\n\n\n\n\nLoosen version requirement for redis raw to pull in bug fix(es).\n\n\n\n\n1.1.1\n\u00b6\n\n\nChanges since last release\n\n\n\n\nFix issue with implicitly named indexes.\n\n\n\n\n1.1.0\n\u00b6\n\n\nChanges since last release\n\n\n\n\nSupport \naggregations\n.\n\n\n\n\n1.0.1\n\u00b6\n\n\nChanges since last release\n\n\n\n\nSupport NOINDEX fields.\n\n\n\n\n1.0.0\n\u00b6\n\n\nChanges since last release\n\n\n\n\nSupport complete RediSearch API, now including RETURN, SUMMARIZE, HIGHLIGHT, EXPANDER, and PAYLOAD in search queries.\n\n\n\n\n0.11.0\n\u00b6\n\n\nChanges since last release\n\n\n\n\nAdd \nhash indexing\n.\n\n\n\n\n0.10.1\n\u00b6\n\n\nChanges since last release\n\n\n\n\nPolished docs, and added a section on the Laravel RediSearch package.\n\n\nMade internal changes to how numeric and geo search queries are generated. \n\n\n\n\n0.10.0\n\u00b6\n\n\nChanges since last release\n\n\n\n\nRemove RedisClient class and add adapter functionality.\n\n\nThere are now adapters for Predis, PhpRedis, and the Cheprasov client. They all extend \nAbstractRedisClient\n which implements \nRedisClientInterface\n. An additional adapter can be created by extending AbstractRedisClient or by implementing RedisClientInterface if needed for some reason. \n\n\nHandle RediSearch module error when index is created on a Redis database other than 0.\n\n\nReturn boolean true instead of \"OK\" when using PredisAdapter.\n\n\nA new index now requires that a redis client is passed into its constructor - removed the magic behavior where a default RedisClient instance was auto initialized.\n\n\n\n\n0.9.0\n\u00b6\n\n\nChanges since last release\n\n\n\n\nAn exception is now thrown when the RediSearch module is not loaded in Redis.\n\n\nAllow a \nlanguage to be specified\n when searching.\n\n\n\n\n0.8.0\n\u00b6\n\n\nChanges since last release\n\n\n\n\nAdd \nsearch result sorting\n.\n\n\nRemove NoScoreIdx and Optimize methods as they are deprecated and/or non-functional in RediSearch.\n\n\nAdd \nexplain method\n for explaining a query.\n\n\nAdd optional \nquery logging\n.\n\n\nAdd \nsuggestions\n.\n\n\n\n\n0.7.0\n\u00b6\n\n\nChanges since last release\n\n\n\n\nMany bug fixes and code quality improvements.\n\n\n\n\n0.6.0\n\u00b6\n\n\nChanges since last release\n\n\n\n\nAdd \nbatch indexing\n.\n\n\n\n\n0.5.0\n\u00b6\n\n\n\n\nRename vendor namespace from \nEeh\n to \nEhann\n\n\nAbstractIndex\n was renamed to \nIndex\n and is no longer abstract.\n\n\nCustom document ID is now properly set when adding to an index.",
            "title": "Changelog"
        },
        {
            "location": "/changelog/#changelog",
            "text": "",
            "title": "Changelog"
        },
        {
            "location": "/changelog/#112",
            "text": "Changes since last release   Loosen version requirement for redis raw to pull in bug fix(es).",
            "title": "1.1.2"
        },
        {
            "location": "/changelog/#111",
            "text": "Changes since last release   Fix issue with implicitly named indexes.",
            "title": "1.1.1"
        },
        {
            "location": "/changelog/#110",
            "text": "Changes since last release   Support  aggregations .",
            "title": "1.1.0"
        },
        {
            "location": "/changelog/#101",
            "text": "Changes since last release   Support NOINDEX fields.",
            "title": "1.0.1"
        },
        {
            "location": "/changelog/#100",
            "text": "Changes since last release   Support complete RediSearch API, now including RETURN, SUMMARIZE, HIGHLIGHT, EXPANDER, and PAYLOAD in search queries.",
            "title": "1.0.0"
        },
        {
            "location": "/changelog/#0110",
            "text": "Changes since last release   Add  hash indexing .",
            "title": "0.11.0"
        },
        {
            "location": "/changelog/#0101",
            "text": "Changes since last release   Polished docs, and added a section on the Laravel RediSearch package.  Made internal changes to how numeric and geo search queries are generated.",
            "title": "0.10.1"
        },
        {
            "location": "/changelog/#0100",
            "text": "Changes since last release   Remove RedisClient class and add adapter functionality.  There are now adapters for Predis, PhpRedis, and the Cheprasov client. They all extend  AbstractRedisClient  which implements  RedisClientInterface . An additional adapter can be created by extending AbstractRedisClient or by implementing RedisClientInterface if needed for some reason.   Handle RediSearch module error when index is created on a Redis database other than 0.  Return boolean true instead of \"OK\" when using PredisAdapter.  A new index now requires that a redis client is passed into its constructor - removed the magic behavior where a default RedisClient instance was auto initialized.",
            "title": "0.10.0"
        },
        {
            "location": "/changelog/#090",
            "text": "Changes since last release   An exception is now thrown when the RediSearch module is not loaded in Redis.  Allow a  language to be specified  when searching.",
            "title": "0.9.0"
        },
        {
            "location": "/changelog/#080",
            "text": "Changes since last release   Add  search result sorting .  Remove NoScoreIdx and Optimize methods as they are deprecated and/or non-functional in RediSearch.  Add  explain method  for explaining a query.  Add optional  query logging .  Add  suggestions .",
            "title": "0.8.0"
        },
        {
            "location": "/changelog/#070",
            "text": "Changes since last release   Many bug fixes and code quality improvements.",
            "title": "0.7.0"
        },
        {
            "location": "/changelog/#060",
            "text": "Changes since last release   Add  batch indexing .",
            "title": "0.6.0"
        },
        {
            "location": "/changelog/#050",
            "text": "Rename vendor namespace from  Eeh  to  Ehann  AbstractIndex  was renamed to  Index  and is no longer abstract.  Custom document ID is now properly set when adding to an index.",
            "title": "0.5.0"
        }
    ]
}